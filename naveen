//----------------------------------------------------------------------------//
//                                                                            //
//   This material contains, and is a part of a computer software program     //
//   which is, proprietary and confidential information owned by:             //
//                  Honeywell Technologies Solution Lab, INC.                 //
//   The program, including this material, may not be duplicated, disclosed   //
//   or reproduced in whole or in part for any purpose without the express    //
//   written authorization of Honeywell.  All authorized                      //
//   reproductions must be marked with this legend.                           //
//                                                                            //
//              © 2006 Honeywell Technologies Solution Lab, Inc.              //
//              Honeywell Technologies Solution Lab, Incorporated             //
//                            All rights reserved.                            //
//                                                                            //
//----------------------------------------------------------------------------//
//
//    MODULE NAME       :   FlowTableSeriesCurveMapper.h
//
//    DESCRIPTIVE NAME  :   CFlowTableSeriesCurveMapper Class Definition
//
//    MODULE FUNCTION   :   Header File for FlowTableSeriesCurveMapper Engineering object
//
//    MODULE AUTHOR     :   Gaurav Banda
//
//    DATE MODULE WRITTEN:  14th Nov 2007
//
//----------------------------------------------------------------------------
//
//
// History:
// 
//

#pragma once

#ifndef	_CSeriesCurveMapper_HeaderFile_
#define _CseriesCurveMapper_HeaderFile_

#ifndef _TCollection_AsciiString_HeaderFile
#include <TCollection_AsciiString.hxx> 
#endif //_TCollection_AsciiString_HeaderFile

#ifndef NCollection_DefineList_HeaderFile
#include <NCollection_DefineList.hxx>
#endif //NCollection_DefineList_HeaderFile

#ifndef __CEngineeringObject_HeaderFile__
#include <EngineeringObject.h>
#endif //__CEngineeringObject_HeaderFile__

#ifndef __VNet_1_0DocController_HeaderFile__
#include <VNet_1_0DocController.h>
#endif //__VNet_1_0DocController_HeaderFile__

#ifndef __CTableDataParametersList_HeaderFile_
#include <TableDataParametersList.h>
#endif //__CTableDataParametersList_HeaderFile_

#include "Util.h"

typedef StringSequence TDParameterList;


//#include <SealRunningClearanceAttributes.h>

// Class Definition

class CFlowTableSeriesCurveMapper : public CEngineeringObject{
	
public:
	
	CFlowTableSeriesCurveMapper(
		const Ptr(HFWDataSource)& l_pDataSource
		);////Changed
	//CFlowTableSeriesCurveMapper(const Ptr( CVNet_1_0DocController)& l_pDocCtrl,
	//	const TCollection_AsciiString& l_strID,
	//	Standard_Integer p_bSeriesCurve =0
	//	);
	CFlowTableSeriesCurveMapper(const Ptr(HFWDataSource)& ,
		const TCollection_AsciiString& l_strID);
	
	virtual ~CFlowTableSeriesCurveMapper ();
	
public:
	virtual void SetSeriesCurve(const TCollection_AsciiString& pSeriesCurve);
	virtual void SetSeriesValue(TCollection_AsciiString& pSeriesValue);
	void SetTDParameterID( TCollection_AsciiString& pTDParameterID);
	
	
	virtual TCollection_AsciiString GetSeriesCurve();
	virtual TCollection_AsciiString GetSeriesValue();
	TDParameterList GetTDParametersList();
	Ptr(CTableDataParametersList) GetParameter(const TCollection_AsciiString&);
	
	void RemoveTDParameterIDRow();
protected:
	CFlowTableSeriesCurveMapper()
	{
	}
	
private:
};
DEFINE_SMART_PTR(CFlowTableSeriesCurveMapper,CEngineeringObject)




//class for legacy model
DEFINE_SMART_PTR(CFlowTableSerCurMapLegacy,CFlowTableSeriesCurveMapper)
class CFlowTableSerCurMapLegacy: public CFlowTableSeriesCurveMapper
{
public:
	CFlowTableSerCurMapLegacy(const Ptr(HFWDataSource)& l_pDataSource)
		: m_pNext(NULL)
	{
		m_pDataSrc = l_pDataSource;
	}
	~CFlowTableSerCurMapLegacy()
	{
	}

	void SetSeriesCurve(const TCollection_AsciiString& pSeriesCurve)
	{
		m_strSerCur = pSeriesCurve;
	}
	void SetSeriesValue(TCollection_AsciiString& pSeriesValue)
	{
		m_strSerVal = pSeriesValue;
	}

	TCollection_AsciiString GetSeriesCurve()
	{
		return m_strSerCur;
	}
	TCollection_AsciiString GetSeriesValue()
	{
		return m_strSerVal;
	}

	void AddFirstPara(Ptr(CFlowTableDataParaLegacy) l_pPara)
	{
		m_pFirstPara = l_pPara;
	}
	Ptr(CFlowTableDataParaLegacy) GetFirstPara()
	{
		return m_pFirstPara;
	}
	void AddNext(Ptr(CFlowTableSerCurMapLegacy) l_pNext)
	{
		m_pNext = l_pNext;
	}
	void SetMapID(TCollection_AsciiString& l_strID)
	{
		m_strID = l_strID;
	}

	Ptr(CFlowTableSerCurMapLegacy) GetNext()
	{
		return m_pNext;
	}
	Standard_Boolean IsNext()
	{
		return !(m_pNext.IsNull());
	}


	void UpdateXMLDataSrc()
	{
		if(m_strID.IsEmpty())
			return;

		//get table
		Ptr(HFWDataTable) l_pDataTab = m_pDataSrc->GetTable("FlowTableSeriesCurveMapper");
		//set row object
		m_pDataRow = l_pDataTab->GetRow(m_strID);
		//update in engg object
		//CFlowTableSeriesCurveMapper::SetSeriesCurve(m_strSerCur);
		CFlowTableSeriesCurveMapper::SetSeriesValue(m_strSerVal);

		//update all the parameters in a list
		Ptr(CFlowTableDataParaLegacy) l_pPara = m_pFirstPara;
		TDParameterList l_list = CFlowTableSeriesCurveMapper::GetTDParametersList();
		TDParameterList::Iterator l_iter(l_list);
		for(; l_iter.More(); l_iter.Next())
		{
			if(!l_pPara.IsNull())
			{
				TCollection_AsciiString l_strID = l_iter.Value();
				l_pPara->SetID(l_strID);
				l_pPara->UpdateXMLDataSrc();
			}
			else
				break;
			l_pPara = l_pPara->GetNext();
		}
	}

protected:
	TCollection_AsciiString							m_strSerCur;
	TCollection_AsciiString							m_strSerVal;
	Ptr(CFlowTableDataParaLegacy)					m_pFirstPara;
	//keep next running clearance op map object
    Ptr(CFlowTableSerCurMapLegacy)					m_pNext;

	TCollection_AsciiString							m_strID;
private:

};

#endif //_CSeriesCurveMapper _HeaderFile_





//----------------------------------------------------------------------------//
//                                                                            //
//   This material contains, and is a part of a computer software program     //
//   which is, proprietary and confidential information owned by:             //
//                  Honeywell Technologies Solution Lab, INC.                 //
//   The program, including this material, may not be duplicated, disclosed   //
//   or reproduced in whole or in part for any purpose without the express    //
//   written authorization of Honeywell.  All authorized                      //
//   reproductions must be marked with this legend.                           //
//                                                                            //
//              © 2006 Honeywell Technologies Solution Lab, Inc.              //
//              Honeywell Technologies Solution Lab, Incorporated             //
//                            All rights reserved.                            //
//                                                                            //
//----------------------------------------------------------------------------//
//
//    MODULE NAME       :  FlowTable SeriesCurveMapper.cpp
//
//    DESCRIPTIVE NAME  :   CFlowTableSeriesCurveMapper Class Definition
//
//    MODULE FUNCTION   :   Source file for  FlowTable SeriesCurveMapper EngineeringObject
//
//    MODULE AUTHOR     :   Gaurav Banda
//
//    DATE MODULE WRITTEN:  14/11/2007 06:06:00 PM
//
//----------------------------------------------------------------------------
//
//
// History:
// 
//
/****************************************************************************** 
 *                                                                            * 
 *                           Program Include Files                            * 
 *                                                                            * 
 ******************************************************************************/
#include "stdafx.h"
#ifndef	_CSeriesCurveMapper_HeaderFile_
#include <SeriesCurveMapper.h>
#endif //_CSealRunningClearanceOPMapper_HeaderFile_

#ifndef __CTableDataParametersList_HeaderFile_
#include <TableDataParametersList.h>
#endif //__CTableDataParametersList_HeaderFile_

//////////////////////////////// PUBLIC ///////////////////////////////////////  
//================================ LIFECYCLE ================================== 
//======================= Construction and Destruction ======================== 

/*******************************************************************************/
//   Function Name  :   Constructor with parameters
//   Parameters     :   const Ptr(CVNet_1_0DocController)& -->DocController Obj
//   Description    :   
//   Modify History :
//      1.              Date    ->  15/09/2007
//                      Author  ->  Gaurav Banda
//                      Purpose ->  Created
/*******************************************************************************/
//CFlowTableSeriesCurveMapper::CFlowTableSeriesCurveMapper (const Ptr(CVNet_1_0DocController)& l_pDocCtrl)							   
//{
//	m_pDataSrc = l_pDocCtrl->GetDataSource();
//	Ptr(HFWDataTable) l_pDataTab = m_pDataSrc->GetTable("FlowTableSeriesCurveMapper");
//	m_pDataRow  = l_pDataTab->AddNewRow();
//
//	//crate all 10 FlowTableTableDataParameters rows and add them in list
//	for(Standard_Integer l_nCnt = 1; l_nCnt <= 10; l_nCnt++)
//	{
//		Ptr(CTableDataParametersList) l_pPara = new CTableDataParametersList(l_pDocCtrl->GetDataSource());
//		SetTDParameterID(l_pPara->GetObjectID());
//	}
//}
/*******************************************************************************/
//   Function Name  :   Constructor with Parameters
//   Parameters     :   const Ptr(CVNet_1_0DocController)& -> Doc Controller Object
//						const TCollection_AsciiString& - Row ID 
//						Standard_Integer l_nFlagOPID 
//   Description    :   l_nFlagSeriesCurve = 1 => Creation of the New Object and the l_strID is
//						the SeriesCurve
//						l_nFlagSeriesCurve = 0 => Retrieving the data from the existing Object ID
//						so, in this case l_strID is the class Object ID
//   Modify History :
//      1.              Date    ->  15/11/2007
//                      Author  ->  Gaurav Banda
//                      Purpose ->  Created
/*******************************************************************************/
//CFlowTableSeriesCurveMapper::CFlowTableSeriesCurveMapper(const Ptr(CVNet_1_0DocController)& l_pDocCtrl,
//																const TCollection_AsciiString& l_strID,
//																Standard_Integer l_nFlagSeriesCurve )							    
//{
//	m_pDataSrc = l_pDocCtrl->GetDataSource();
//	Ptr(HFWDataTable) l_pDataTab = m_pDataSrc->GetTable("FlowTableSeriesCurveMapper");
//
//	if( l_nFlagSeriesCurve ==1)
//	{
//		m_pDataRow = l_pDataTab->AddNewRow();
//	}
//	else
//	{
//		m_pDataRow  = l_pDataTab->GetRow(l_strID);
//	}
//}

/*******************************************************************************/
//   Function Name  :   Constructor with Parameters
//   Parameters     :   
//   Description    :   
//   Modify History :
//      1.              Date    ->  22 Nov, 2007
//                      Author  ->  Ashish Negi
//                      Purpose ->  Created
/*******************************************************************************/
CFlowTableSeriesCurveMapper::CFlowTableSeriesCurveMapper
(const Ptr(HFWDataSource)& l_pDataSrc,const TCollection_AsciiString& l_strID)							    
{
	m_pDataSrc = l_pDataSrc;
	Ptr(HFWDataTable) l_pDataTab = m_pDataSrc->GetTable("FlowTableSeriesCurveMapper");

	m_pDataRow  = l_pDataTab->GetRow(l_strID);
}


/*******************************************************************************/
//   Function Name  :   Destructor
//   Parameters     :   
//   Description    :   
//   Modify History :
//      1.              Date    ->  15/11/2007
//                      Author  ->  Gaurav Banda
//                      Purpose ->  Created
/*******************************************************************************/

CFlowTableSeriesCurveMapper::~CFlowTableSeriesCurveMapper ()
{
}
/*******************************************************************************/
//   Function Name  :   SetSeriesCurve
//   Parameters     :   TCollection_AsciiString&
//   Description    :   Sets the seriesCurve
//   Modify History :
//      1.              Date    ->  15/11/2007
//                      Author  ->  Gaurav Banda
//                      Purpose ->  Created
/*******************************************************************************/

void CFlowTableSeriesCurveMapper::SetSeriesCurve(const TCollection_AsciiString& pSeriesCurve)
{
	m_pDataRow->GetColumn("SeriesCurve")->SetData(pSeriesCurve);
}
/*******************************************************************************/
//   Function Name  :   SetSeriesValue
//   Parameters     :   TCollection_AsciiString&
//   Description    :   Sets the series Value
//   Modify History :
//      1.              Date    ->  15/11/2007 
//                      Author  ->  Gaurav Banda
//                      Purpose ->  Created
/*******************************************************************************/

void CFlowTableSeriesCurveMapper::SetSeriesValue(TCollection_AsciiString& pSeriesValue)
{
	m_pDataRow->GetColumn("SeriesValue")->SetData(pSeriesValue);
}
/*******************************************************************************/
//   Function Name  :   GetSeriesCurve
//   Parameters     :   
//   Return			:	TCollection_AsciiString
//   Description    :   Returns the SeriesCurve
//   Modify History :
//      1.              Date    ->  15/11/2007
//                      Author  ->  Gaurav Banda
//                      Purpose ->  Created
/*******************************************************************************/

TCollection_AsciiString CFlowTableSeriesCurveMapper::GetSeriesCurve()
{
	return m_pDataRow->GetColumn("SeriesCurve")->GetData();
}
/*******************************************************************************/
//   Function Name  :   GetSeriesValue
//   Parameters     :   
//   Return			:	TCollection_AsciiString
//   Description    :   Returns SeriesValue
//   Modify History :
//      1.              Date    ->  15/11/2007
//                      Author  ->  Gaurav Banda
//                      Purpose ->  Created
/*******************************************************************************/

TCollection_AsciiString CFlowTableSeriesCurveMapper::GetSeriesValue()
{
	return m_pDataRow->GetColumn("SeriesValue")->GetData();
}

/*******************************************************************************/
//   Function Name  :   GetTDParametersList
//   Parameters     :   
//	 Return			:   TDParameterList - StringList
//   Description    :   Returns TableData Parameters ID List
//   Modify History :
//      1.              Date    ->  15/11/2007
//                      Author  ->  Gaurav Banda
//                      Purpose ->  Created
/*******************************************************************************/

TDParameterList CFlowTableSeriesCurveMapper::GetTDParametersList()
{
	TDParameterList l_ListTDParameters;
	Ptr(HFWDataSubTable) l_pDataSubTab = 
			m_pDataRow->GetColumn("TableDataParameterList")->GetSubTable();

	Standard_Integer     l_nRows       = l_pDataSubTab->GetNoRows();
	for(Standard_Integer i=0; i<l_nRows; i++){
		try {
			Ptr( HFWDataRow) l_pDataRow = l_pDataSubTab->GetRow(i);
			Ptr( HFWDataColumn) l_pDataSubCol 
					= l_pDataRow->GetColumn(TCollection_AsciiString("TableDataParametersListID"));
			l_ListTDParameters.Append(l_pDataSubCol->GetData());
		}catch(HFWException* pEx){
			pEx->PrintStack();
		}		
	}
	return l_ListTDParameters;
}
/*******************************************************************************/
//   Function Name  :   SetTDParameterID
//   Parameters     :   TCollection_AsciiString -> ParameterID
//						Attrib Object ID (CTableDataParameters ID)s 
//	 Return			:   
//   Description    :   Returns TableData Parameter Attributes ID List
//   Modify History :
//      1.              Date    ->  15/11/2007
//                      Author  ->  Gaurav Banda
//                      Purpose ->  Created
/*******************************************************************************/
void CFlowTableSeriesCurveMapper::SetTDParameterID( TCollection_AsciiString& pTDParameterID)
{
	Ptr( HFWDataSubTable) l_pDataSubTab = 
		m_pDataRow->GetColumn( "TableDataParameterList")->GetSubTable();
	Ptr( HFWDataRow) l_pDataRow = l_pDataSubTab->AddNewRow();

	l_pDataRow->GetColumn(TCollection_AsciiString("TableDataParametersListID"))->SetData( pTDParameterID);
}
/*******************************************************************************/
//   Function Name  :   Remove1DSurfaceTempIDRow
//   Parameters     :   __(N.A)
//						
//	 Return			:   
//   Description    :   Removes One Row of the 1D Surface Temperature ID Row From the Database
//   Modify History :
//      1.              Date    ->  15/11/2007 
//                      Author  ->  Gaurav Banda
//                      Purpose ->  Created
/*******************************************************************************/
void CFlowTableSeriesCurveMapper::RemoveTDParameterIDRow()
{
	try
	{
		// Getting the Sub Table for the DiskCav1DSurfTempAttribList
		Ptr(HFWDataSubTable) l_pDataSubTab = 
				m_pDataRow->GetColumn("TableDataParameterList")->GetSubTable();
		
		// Getting the Number of Rows
		Standard_Integer l_nRows = l_pDataSubTab->GetNoRows();
															
		// Getting the Row for the First																												
		Ptr( HFWDataRow) l_pDataRow = l_pDataSubTab->GetRow(1);
		// Getting the subcolumn 
		Ptr( HFWDataColumn) l_pDataSubCol 
						= l_pDataRow->GetColumn(TCollection_AsciiString("TableDataParametersListID"));
		// Getting the Data for the sub Column -> First Data ID
		TCollection_AsciiString l_strTDParameterID = l_pDataSubCol->GetData();

		/*
		 * Removing 1D Disk Cavity Geometry ID row corresponding to this data row was deleted 
		 * externally before while saving the data into the 1D Disk Cavity Geometry
		 */

		// Removing 1D Surface Temperature Attribute Row  for the First ID 
		Ptr( HFWDataTable) l_pTDParameterTab = m_pDataSrc->GetTable( "FlowTableTableDataParameters");
		l_pTDParameterTab ->RemoveRow( l_strTDParameterID );

		// Removing the 1D Surface Temperature Data ID from the sequence
		l_pDataSubTab->RemoveRow(1); // Removing the First Row
																														
	}
	catch( HFWException* pEx)
	{
		TCollection_AsciiString l_strErrMsg;
		Copy( l_strErrMsg, pEx->GetErrorMessage());
		VNetLogger::Log( VN_LOG_ERROR, "CFlowTableSeriesCurveMapper::RemoveTDParameterIDRow",
							l_strErrMsg, __LINE__);
	}				
	
}


/*******************************************************************************/
//   Function Name  :   GetParameter
//   Parameters     :   TCollection_AsciiString
//						
//	 Return			:   
//   Description    :   ge tparameter object for a given ID
//   Modify History :
//      1.              Date    ->  27 Nov, 2007
//                      Author  ->  Ashish Negi
//                      Purpose ->  Created
/*******************************************************************************/
Ptr(CTableDataParametersList) CFlowTableSeriesCurveMapper::GetParameter
(const TCollection_AsciiString& l_strID)
{
	return new CTableDataParametersList(m_pDataSrc,l_strID);
}

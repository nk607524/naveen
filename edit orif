#pragma once

#include <QWidget>
#include "ui_Edit_orificeFreCharacterstics.h"
#include <QToolBox>
#include <QWidget>
#include <QtWidgets>
#include <QMainWindow>
#include "Flow_Area.h"
#include "Flow_Correlation.h"
#include "Heat_Transfer.h"
#include "Variation.h"
#include "Goal_Seeking.h"
#include <QDebug>
#include "OrificeFREModel.h"

class Edit_orificeFreCharacterstics : public QWidget
{
	Q_OBJECT

public:
	Edit_orificeFreCharacterstics(Ptr(OrificeFREModel) p_pOrificeFREModel,QWidget *parent = nullptr);
	~Edit_orificeFreCharacterstics();
	void setupToolBox();
	//QMap<QString, QVector<QString>> myMap;
	//QVector<int>indexbnr;

private slots:
	void onOkButtonClicked();    
	void onCancelButtonClicked();
	//void on_toolBox_currentChanged(int index); //naveen


private:
	Ui::Edit_orificeFreCharactersticsClass ui;

	Ptr(OrificeFREModel) m_pOrificeFREModel;

	Flow_Area* m_flowAreaWidget;
	Flow_Correlation* m_flowCorrelationWidget;
	Heat_Transfer* m_heatTransferWidget;
	Variation* m_variationWidget;
	Goal_Seeking* m_goalSeekingWidget;
};

#include "Edit_orificeFreCharacterstics.h"
#include "Flow_Correlation.h"


Edit_orificeFreCharacterstics::Edit_orificeFreCharacterstics(Ptr(OrificeFREModel) p_pOrificeFREModel, QWidget* parent)
    : m_pOrificeFREModel(p_pOrificeFREModel), QWidget(parent)
{
    ui.setupUi(this);



    m_flowAreaWidget = new Flow_Area(this->m_pOrificeFREModel);
    //flowAreaWidget->setMode(Flow_Area::Tube);



    //QWidget* OrificecrossFlowWidget = new OrificeCrossFlow_FlowCoeff();

    m_flowCorrelationWidget = new Flow_Correlation(this->m_pOrificeFREModel);


    m_heatTransferWidget = new Heat_Transfer();
    m_variationWidget = new Variation();
    m_goalSeekingWidget = new Goal_Seeking();
    setupToolBox();
    connect(ui.pushButton, SIGNAL(clicked()), this, SLOT(onOkButtonClicked()));
    //connect(ui.pushButton, &QPushButton::clicked, this, &Edit_orificeFreCharacterstics::onOkButtonClicked);
    connect(ui.pushButton_2, &QPushButton::clicked, this, &Edit_orificeFreCharacterstics::onCancelButtonClicked);
}



Edit_orificeFreCharacterstics::~Edit_orificeFreCharacterstics()
{}

void Edit_orificeFreCharacterstics::setupToolBox()
{




    ui.toolBox->insertItem(0, m_flowAreaWidget, "Flow Area");

    ui.toolBox->insertItem(1, m_flowCorrelationWidget, "flowcoeff-Cf");

    ui.toolBox->insertItem(2, m_heatTransferWidget, "Heat Transfer");
    ui.toolBox->insertItem(3, m_variationWidget, "Variation");
    ui.toolBox->insertItem(4, m_goalSeekingWidget, "Goal Seeking");

    QWidget* wid = ui.toolBox->widget(5);
    ui.toolBox->removeItem(5);
    delete wid;


}

//void Edit_orificeFreCharacterstics::onOkButtonClicked()
//{
//    // Example: Update model data based on the widget states
//    for (int var = 0; var < indexbnr.size(); var++) {
//        //if (indexbnr.at(var) == 1)
//        //{
//        //    FlowArea* flowAreaPtr = dynamic_cast<FlowArea*>(flowareacorr);
//
//        //    if (flowAreaPtr) {
//        //        // Successfully casted, now you can call FlowArea-specific methods
//        //        QString data = flowAreaPtr->getdata();
//        //        flowAreaPtr->ui->lineEdit_5->setText(data);
//        //        qDebug() << "Flow area data: " << data;
//        //    }
//        //    else {
//        //        // The cast failed, handle the error
//        //        qDebug() << "Failed to cast QWidget* to FlowArea*";
//        //    }
//        //}
//        if (indexbnr.at(var) == 0)
//        {
//            Flow_Correlation* flowcoeefPtr = dynamic_cast<Flow_Correlation*>(m_flowCorrelationWidget);             if (flowcoeefPtr) {
//                // Successfully casted, now you can call FlowArea-specific methods
//
//                qDebug() << "bnnrr  combobox index ::" << flowcoeefPtr->getComboBoxIndex() << endl;
//                if (flowcoeefPtr->getComboBoxIndex() == 0)
//                {
//                    /*QVector<QString> ingressvet;
//                    ingressvet.clear();
//                    ingressvet << flowcoeefPtr->getdatalineEdit_1();*/
//                    TCollection_AsciiString oldvalue = flowcoeefPtr->getdatalineEdit_1().toStdString().c_str();
//                    m_pOrificeFREModel->setTuningFactor(oldvalue);
//                   // myMap["ingress"] = ingressvet;
//
//                }
//                else if (flowcoeefPtr->getComboBoxIndex() == 1)
//                {
//                    QVector<QString> Egressvet;
//                    Egressvet.clear();
//                    Egressvet << flowcoeefPtr->getdatalineEdit_1();
//                    myMap["Egress"] = Egressvet;
//
//                }
//                else if (flowcoeefPtr->getComboBoxIndex() == 2)
//                {
//                    QVector<QString> usedInputvet;
//                    usedInputvet.clear();
//                    usedInputvet << flowcoeefPtr->getdatalineEdit_4();
//                    myMap["usedInput"] = usedInputvet;
//
//                }
//                else if (flowcoeefPtr->getComboBoxIndex() == 3)
//                {
//                    QVector<QString> Huningvet;
//                    Huningvet.clear();
//                    Huningvet << flowcoeefPtr->getdatalineEdit_1() << flowcoeefPtr->getdatalineEdit_2() << flowcoeefPtr->getdatalineEdit_3();
//                    myMap["Huning"] = Huningvet;
//
//                }
//                else if (flowcoeefPtr->getComboBoxIndex() == 4)
//                {
//                    QVector<QString> Parkervet;
//                    Parkervet.clear();
//                    Parkervet << flowcoeefPtr->getdatalineEdit_1() << flowcoeefPtr->getdatalineEdit_2() << flowcoeefPtr->getdatalineEdit_3();
//                    myMap["Parker"] = Parkervet;
//
//                }
//                else if (flowcoeefPtr->getComboBoxIndex() == 5)
//                {
//                    QVector<QString> Bindervet;
//                    Bindervet.clear();
//                    Bindervet << flowcoeefPtr->getdatalineEdit_1() << flowcoeefPtr->getdatalineEdit_2() << flowcoeefPtr->getdatalineEdit_3();
//                    myMap["Binder"] = Bindervet;
//                }
//                qDebug() << "Flow area data: ";
//            }
//            else {
//                qDebug() << "Failed to cast QWidget* to FlowArea*";
//            }
//        }
//
//    }
//    qDebug() << "mymap" << myMap.size() << ":::" << myMap << endl;
//    close();
//}




void Edit_orificeFreCharacterstics::onOkButtonClicked()
{
    // Retrieve values from Flow_Correlation
 QString lineEdit_1_value = m_flowCorrelationWidget->getdatalineEdit_1();
    int comboBoxIndex = m_flowCorrelationWidget->getComboBoxIndex();

    // Debug output to ensure values are retrieved correctly
    qDebug() << "LineEdit 1 Value: " << lineEdit_1_value;
    qDebug() << "ComboBox Index: " << comboBoxIndex;

    // Check if the lineEdit_1_value is valid before updating the model
    if (!lineEdit_1_value.isEmpty()) {
        // Update the tuning factor in the model
        TCollection_AsciiString oldvalue = lineEdit_1_value.toStdString().c_str();
        m_pOrificeFREModel->setTuningFactor(oldvalue);

        // Optionally notify the user that the update was successful
        QMessageBox::information(this, "Success", "Values updated successfully.");
    } else {
        // Show a warning if the input is invalid
        QMessageBox::warning(this, "Warning", "Please enter a valid value in Line Edit 1.");
        return; // Prevent closing the UI
    }

    // Close the dialog or notify that data has been saved
    this->close();
}
void Edit_orificeFreCharacterstics::onCancelButtonClicked()
{
    // Simply close the dialog or do any necessary cleanup
    close();
}

